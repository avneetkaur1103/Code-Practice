RAII (Resource Acquistion Is Initialization):

RAII is a C++ programming technique which binds the life cycle of a resource that must be acquired before use 
(allocated heap memory, thread of execution, open socket, open file, locked mutex, disk space, database connectionâ€”anything 
that exists in limited supply) to the lifetime of an object.

1. encapsulate each resource into a class, where
    a. the constructor acquires the resource and establishes all class invariants or throws an exception if that cannot be done,
    b. the destructor releases the resource and never throws exceptions;
2. always use the resource via an instance of a RAII-class that either
    a. has automatic storage duration or temporary lifetime itself, or
    b. has lifetime that is bounded by the lifetime of an automatic or temporary object
    
    Move semantics make it possible to safely transfer resource ownership between objects.
    Classes with open()/close(), lock()/unlock() member functions are non-RAII classes.
    C++ classes that manage their own resources: string,vector,shared-ptr, unique_ptr, shared_mutex -- do not require explicit cleanup
 
    e.g.:
    void bad() 
{
    m.lock();                    // acquire the mutex
    f();                         // if f() throws an exception, the mutex is never released
    if(!everything_ok()) return; // early return, the mutex is never released
    m.unlock();                  // if bad() reaches this statement, the mutex is released
}
 
void good()
{
    std::lock_guard<std::mutex> lk(m); // RAII class: mutex acquisition is initialization
    f();                               // if f() throws an exception, the mutex is released
    if(!everything_ok()) return;       // early return, the mutex is released
} 

RAII leverages the core language features (object lifetime, scope exit, order of initialization and stack unwinding) 
to eliminate resource leaks and guarantee exception safety. 

Read:
https://www.geeksforgeeks.org/stack-unwinding-in-c/
https://stackoverflow.com/questions/2331316/what-is-stack-unwinding
