class abc {};

compiler generates empty functions: abc(const abc& obj){}  //copy constructor - member by member initialization
                                    abc& operator= (const anc& obj) {}  //assignment operator - member by member copying
                                    abc(){} //constructor //1. call base class's default constructor; 2. call data member's default constructor
                                    ~abc(){}  //destructor //1. call base class's default destructor; 2. call data member's default destructor


Compiler silently generates these 4 functions: All are public  and inline and generated only if needed/used.
COPY CONSTRUCTOR:

COPY ASSIGNMENT OPERATOR:
- not generated if one of the member is const or reference, they cannot be copied, only initialized.

DESTRUCTOR:
- if base class's destructor is private, object class's destructor will also not get generated

CONSTRUCTOR: (Only when no other constuctor is declared)
- if base class 's default constrctor is not there, object class's constructor will also not get generated


Notess: 
1.Default constructor is one which can work without passing any parameter.
abc(){}  and   abc(string name = "Bob"){} both are default constructor.

2.If any data member is a reference, then we cannot use STL containers, as containee should be copy assignable and copy constructable.
Also, if class is like:

class abc{
  string& name;
};

int main(){
  abc ob; //not compile as reference needs to be initialized
}


DISALLOW FUNCTIONS:
Sometimes compiler generated funcs are harmful, e.g., class with Files. We can disallow compiler to generate such funcs with foll changes:

class openFile{
  public:
    openFile(string name) {cout<<"open file: "<<name<<endl; }  //this will diallow generation of default constructor
    void destroy(){ delete this;} //fail as object f is on stack and will again call destructor , whichis private.
                                we should store object on heap if we are making a destructor private.
                                use private destructor to stay out of stack.
                                
  private:
     openFile(openFile &obj); //make copy constr a private fn with no definition or body will disallow calling of copy constr in main                                                                                             or from any member function.
     openFile& operator=(const openFile& obj); //make copy assignment operator a private fn with no definition or body will disallow                                                                         calling of copy constr in main or from any member function.
    //any other derived fn  to not allow opeFile obj to call it
    
    ~openFile(){ cout<"Destructor called"<<end; } //private destructor can only be called by member func or friend functions. This is                                           how we implement shared pointer refernce count.once all its child go out of scope, it sucides.
    
    
}

int main(){
  openFile f(string name("abc"));
  openFile f2(f); // not compile,as we have restricted calling of copy constructor otherwise both f and f2 will write to file abc(which                                                                                                           will cause issues)
  
  
}
